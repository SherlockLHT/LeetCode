#ifndef MIDDLE_OF_THE_LINKED_LIST_H
#define MIDDLE_OF_THE_LINKED_LIST_H

#include "LinkList.h"

/*
给定一个带有头结点 head 的非空单链表，返回链表的中间结点。
如果有两个中间结点，则返回第二个中间结点。

示例 1：
输入：[1,2,3,4,5]
输出：此列表中的结点 3 (序列化形式：[3,4,5])
返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。
注意，我们返回了一个 ListNode 类型的对象 ans，这样：
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.
示例 2：

输入：[1,2,3,4,5,6]
输出：此列表中的结点 4 (序列化形式：[4,5,6])
由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。

提示：

给定链表的结点数介于 1 和 100 之间。
*/

/**
* Definition for singly-linked list.
* struct ListNode {
*     int val;
*     ListNode *next;
*     ListNode(int x) : val(x), next(NULL) {}
* };
*/
ListNode* middleNode(ListNode* head) {
	ListNode* new_link_list = head;
	ListNode* temp = head;

	char flag = 0;
	while (temp != NULL)
	{
		if (flag == 1)
		{
			new_link_list = new_link_list->next;
		}
		flag = !flag;
		temp = temp->next;
	}

	return new_link_list;
}

void TestMiddleNode()
{
	ListNode* link_list = new ListNode(1);
	Append(link_list, 2);
	Append(link_list, 3);
	Append(link_list, 4);
	Append(link_list, 5);
	//Append(link_list, 6);

	DisplayLinkList(link_list);

	ListNode* new_link_list = middleNode(link_list);
	DisplayLinkList(new_link_list);

	ReleaseLinkList(link_list);
}


#endif //MIDDLE_OF_THE_LINKED_LIST_H
